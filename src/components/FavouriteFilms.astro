---
import { format, parse } from 'date-fns';
import { Image } from 'astro:assets';
import data from '../content/favourite/films.yaml';

// Function to extract TMDB ID from URL
const getTmdbIdFromUrl = (url: string): number | null => {
    try {
        const parsedUrl = new URL(url);
        const pathParts = parsedUrl.pathname.split('/');
        // Find the part that contains 'movie' and get the next part which should be the ID
        const movieIndex = pathParts.findIndex(part => part === 'movie');
        if (movieIndex !== -1 && pathParts.length > movieIndex + 1) {
            const idPart = pathParts[movieIndex + 1];
            // Extract just the numeric ID from strings like "976893-perfect-days"
            const idMatch = idPart.match(/^(\d+)/);
            return idMatch ? parseInt(idMatch[1], 10) : null;
        }
    } catch (e) {
        console.error("Invalid URL:", url, e);
    }
    return null;
};

interface FilmInput {
    letterboxdUrl: string;
    tmdbdUrl: string;
}

const filmData: FilmInput[] = data.films;
const date = data.date;

const filmDataWithIds = filmData.map(film => ({
    ...film,
    id: getTmdbIdFromUrl(film.tmdbdUrl) || 0
}));

const apiKey = import.meta.env.TMDB_API_KEY;
const imageBaseURL = 'https://image.tmdb.org/t/p/w500';

const fetchFilmDetails = async (film: FilmInput) => {
    const { id, letterboxdUrl } = film;
    try {
        const detailsRes = await fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`);
        const detailsData = await detailsRes.json();

        const imagesRes = await fetch(`https://api.themoviedb.org/3/movie/${id}/images?api_key=${apiKey}`);
        const imagesData = await imagesRes.json();

        const posterPath = imagesData.posters && imagesData.posters.length > 0 ? imagesData.posters[0].file_path : null;
        const title = detailsData.title || 'Unknown Title';
        const releaseYear = detailsData.release_date ? detailsData.release_date.split('-')[0] : null;

        return {
            id,
            title,
            posterPath,
            letterboxdUrl,
            releaseYear
        };
    } catch (error) {
        console.error(`Failed to fetch details for film ID ${id}:`, error);
        return {
            id,
            title: 'Error Loading Title',
            posterPath: null,
            letterboxdUrl,
            releaseYear: null
        };
    }
};

const films = await Promise.all(filmDataWithIds.map(fetchFilmDetails));

---

<div class="flex flex-col items-center justify-between">
    <div class="w-full flex flex-row items-baseline justify-between">
        <p class="text-[#99AABB] text-md font-light uppercase select-none">Favourite Films</p>
        <p class="text-[#99AABB]/80 text-xs font-light uppercase">Updated {format(date, 'MMMM d, yyyy')}</p>
    </div>
    <div class="w-full h-[1px] bg-[#99AABB]/40 mt-1"></div>

    <div class="w-full grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4 mt-4">
        {films.map(film => (
            <a href={film.letterboxdUrl} target="_blank" rel="noopener noreferrer" class="block group relative" title={`View ${film.title} on Letterboxd`}>
                <div
                    class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs px-3 py-1.5
                           bg-[#435666] text-white/75 text-xs font-medium rounded-md shadow-lg
                           opacity-0 scale-95 group-hover:opacity-100 group-hover:scale-100
                           transition-all duration-200 ease-in-out pointer-events-none z-10"
                >
                    {film.title}{film.releaseYear ? ` (${film.releaseYear})` : ''}
                    <div class="absolute left-1/2 -translate-x-1/2 top-full w-0 h-0
                                border-x-8 border-x-transparent
                                border-t-8 border-[#435666]">
                    </div>
                </div>

                <div class="flex flex-col items-center">
                    {film.posterPath ? (
                        <Image
                            src={`${imageBaseURL}${film.posterPath}`}
                            alt={film.title}
                            width={500}
                            height={750}
                            loading="eager"
                            class="w-full h-auto rounded-sm shadow-lg outline outline-offset-0 outline-transparent transition-all duration-200 ease-in-out group-hover:outline-3 group-hover:outline-offset-[-3px] group-hover:outline-green-500 aspect-[2/3] object-cover"
                        />
                    ) : (
                        <div class="w-full aspect-[2/3] bg-gray-700 rounded-sm flex items-center justify-center outline outline-offset-0 outline-transparent transition-all duration-200 ease-in-out group-hover:outline-3 group-hover:outline-offset-[-3px] group-hover:outline-green-500">
                            <span class="text-white text-sm text-center p-2">No Poster Available</span>
                        </div>
                    )}
                </div>
            </a>
        ))}
    </div>
</div>
