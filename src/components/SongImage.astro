---
import { Image } from 'astro:assets';

interface Props {
    songUrl: string;
    width?: number;
    height?: number;
    className?: string;
}

const { songUrl, width = 250, height = 250, className = '' } = Astro.props;

const clientId = import.meta.env.SPOTIFY_CLIENT_ID;
const clientSecret = import.meta.env.SPOTIFY_CLIENT_SECRET;

let imageUrl: string | null = null;
let trackName: string = 'Loading...';
let artistName: string = '';
let albumName: string = '';
let errorState: string | null = null;

const getSpotifyAccessToken = async (): Promise<string | null> => {
    if (!clientId || !clientSecret) {
        console.error('Spotify client ID or secret not configured in environment variables.');
        errorState = 'Server Configuration Error';
        return null;
    }
    const authString = btoa(`${clientId}:${clientSecret}`);
    try {
        const response = await fetch('https://accounts.spotify.com/api/token', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${authString}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'grant_type=client_credentials',
        });
        if (!response.ok) {
            throw new Error(`Spotify Auth Error: ${response.status} ${await response.text()}`);
        }
        const data = await response.json();
        return data.access_token;
    } catch (error) {
        console.error('Failed to get Spotify access token:', error);
        errorState = 'Spotify Auth Error';
        return null;
    }
};

const getSpotifyTrackIdFromUrl = (url: string): string | null => {
    try {
        const parsedUrl = new URL(url);
        const pathParts = parsedUrl.pathname.split('/');
        const trackIndex = pathParts.indexOf('track');
        if (trackIndex !== -1 && pathParts.length > trackIndex + 1) {
            const idPart = pathParts[trackIndex + 1];
            return idPart.split('?')[0];
        }
    } catch (e) {
        console.error("Invalid Spotify URL:", url, e);
    }
    return null;
};

interface SpotifyTrack {
    album: {
        images: { url: string; height: number; width: number }[];
        name: string;
    };
    artists: { name: string }[];
    name: string;
    external_urls: { spotify: string };
}

const fetchTrackDetails = async (trackId: string, accessToken: string): Promise<{ imageUrl: string | null, trackName: string, artistName: string, albumName: string, spotifyUrl: string } | null> => {
    try {
        const response = await fetch(`https://api.spotify.com/v1/tracks/${trackId}`, {
            headers: { 'Authorization': `Bearer ${accessToken}` },
        });
        if (!response.ok) {
             if (response.status === 404) {
                throw new Error(`Track not found (404)`);
             }
            throw new Error(`Spotify API Error: ${response.status} ${await response.text()}`);
        }
        const track: SpotifyTrack = await response.json();

        const coverImage = track.album.images.length > 0
            ? (track.album.images.find(img => img.height >= 300 || img.width >=300) || track.album.images[0]).url
            : null;
        const artists = track.artists.map(a => a.name).join(', ');

        return {
            imageUrl: coverImage,
            trackName: track.name,
            artistName: artists,
            albumName: track.album.name,
            spotifyUrl: track.external_urls.spotify || '#'
        };
    } catch (error) {
        console.error(`Failed to fetch track details for ID ${trackId}:`, error);
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        errorState = `Error fetching: ${errorMessage}`;
        return null;
    }
};

const trackId = getSpotifyTrackIdFromUrl(songUrl);

if (!trackId) {
    errorState = 'Invalid Spotify Track URL';
} else {
    const accessToken = await getSpotifyAccessToken();
    if (accessToken) {
        const details = await fetchTrackDetails(trackId, accessToken);
        if (details) {
             imageUrl = details.imageUrl;
             trackName = details.trackName;
             artistName = details.artistName;
             albumName = details.albumName;
        } else if (!errorState) {
             errorState = 'Track details not found';
        }
    }
}

let titleAttr = errorState || `${trackName} by ${artistName}`;
if (!errorState && albumName) titleAttr += ` (Album: ${albumName})`;

---
<a href={songUrl} target="_blank" rel="noopener noreferrer" title={titleAttr} class:list={["block group rounded-sm drop-shadow-lg/90", className]}>
    {imageUrl ? (
        <Image
            src={imageUrl}
            alt={`Album cover for ${trackName} by ${artistName}`}
            width={width}
            height={height}
            inferSize={true}
            class="rounded-sm shadow-lg aspect-square object-cover outline outline-offset-0 outline-transparent"
        />
    ) : (
        <div
            class:list={["bg-gray-700 rounded-sm flex items-center justify-center aspect-square", className]}
            style={`width: ${width}px; height: ${height}px;`}
        >
            <span class="text-white text-xs text-center p-1 leading-tight">
                {errorState || trackName}
            </span>
        </div>
    )}
</a>

<div class="mt-4 flex flex-col justify-start gap-0">
    <p class="text-white text-lg text-center font-semibold p-0 leading-tight">
        {trackName}
    </p>
    <p class="text-[#99AABB] text-sm text-center font-light p-0 leading-tight">
        {artistName}
    </p>

</div>