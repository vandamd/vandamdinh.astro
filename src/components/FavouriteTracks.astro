---
import { format } from "date-fns";
import { Image } from "astro:assets";
import data from "../content/favourite/tracks.yaml";

const getSpotifyTrackIdFromUrl = (url: string): string | null => {
    try {
        const parsedUrl = new URL(url);
        const pathParts = parsedUrl.pathname.split("/");
        const trackIndex = pathParts.indexOf("track");
        if (trackIndex !== -1 && pathParts.length > trackIndex + 1) {
            return pathParts[trackIndex + 1];
        }
    } catch (e) {
        console.error("Invalid URL for track:", url, e);
    }
    return null;
};

interface TrackInput {
    spotifyUrl: string;
}

const trackData: TrackInput[] = data.tracks;
const date = data.date;

const clientId = import.meta.env.SPOTIFY_CLIENT_ID;
const clientSecret = import.meta.env.SPOTIFY_CLIENT_SECRET;

interface SpotifyTrack {
    id: string;
    name: string;
    artists: { name: string }[];
    album: {
        name: string;
        images: { url: string; height: number; width: number }[];
    };
    external_urls: { spotify: string };
}

interface FetchedTrackData {
    id: string;
    title: string;
    artist: string;
    albumName: string;
    coverUrl: string | null;
    spotifyUrl: string;
}

const getSpotifyAccessToken = async (): Promise<string | null> => {
    const authString = btoa(`${clientId}:${clientSecret}`);
    try {
        const response = await fetch("https://accounts.spotify.com/api/token", {
            method: "POST",
            headers: {
                Authorization: `Basic ${authString}`,
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: "grant_type=client_credentials",
        });
        if (!response.ok) {
            throw new Error(
                `Spotify Auth Error: ${response.status} ${await response.text()}`,
            );
        }
        const data = await response.json();
        return data.access_token;
    } catch (error) {
        console.error("Failed to get Spotify access token:", error);
        return null;
    }
};

const fetchTrackDetails = async (
    trackIds: string[],
    accessToken: string,
): Promise<FetchedTrackData[]> => {
    if (!trackIds.length) return [];

    try {
        // Use the tracks endpoint
        const response = await fetch(
            `https://api.spotify.com/v1/tracks?ids=${trackIds.join(",")}`,
            {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            },
        );

        if (!response.ok) {
            throw new Error(
                `Spotify API Error: ${response.status} ${await response.text()}`,
            );
        }

        const data = await response.json();

        return data.tracks.map(
            (track: SpotifyTrack | null): FetchedTrackData => {
                if (!track) {
                    console.warn(`Track details not found for one of the IDs.`);
                    return {
                        id: "unknown",
                        title: "Track Not Found",
                        artist: "Unknown Artist",
                        albumName: "Unknown Album",
                        coverUrl: null,
                        spotifyUrl: "#",
                    };
                }

                const coverImage =
                    track.album.images.length > 0
                        ? track.album.images[0].url
                        : null; // Use largest image
                const artistNames = track.artists
                    .map((artist) => artist.name)
                    .join(", ");

                return {
                    id: track.id,
                    title: track.name,
                    artist: artistNames,
                    albumName: track.album.name,
                    coverUrl: coverImage,
                    spotifyUrl: track.external_urls.spotify,
                };
            },
        );
    } catch (error) {
        console.error("Failed to fetch track details from Spotify:", error);
        return trackIds.map((id) => ({
            id: id,
            title: "Error Loading Track",
            artist: "Error",
            albumName: "Error",
            coverUrl: null,
            spotifyUrl: "#",
        }));
    }
};

const trackIds = trackData
    .map((t) => getSpotifyTrackIdFromUrl(t.spotifyUrl))
    .filter((id): id is string => id !== null);
let tracks: FetchedTrackData[] = [];
const accessToken = await getSpotifyAccessToken();

if (accessToken && trackIds.length > 0) {
    tracks = await fetchTrackDetails(trackIds, accessToken);
} else if (trackIds.length === 0) {
    console.warn("No valid Spotify Track IDs extracted from URLs.");
    tracks = trackData.map((_, index) => ({
        id: `placeholder-track-${index}`,
        title: "Invalid URL",
        artist: "Unknown",
        albumName: "Unknown",
        coverUrl: null,
        spotifyUrl: "#",
    }));
} else {
    console.error("Could not fetch tracks due to missing access token.");
    tracks = trackIds.map((id) => ({
        id: id,
        title: "Auth Error",
        artist: "Error",
        albumName: "Error",
        coverUrl: null,
        spotifyUrl: "#",
    }));
}

const orderedTracks = trackData.map((inputTrack) => {
    const inputId = getSpotifyTrackIdFromUrl(inputTrack.spotifyUrl);
    return (
        tracks.find((fetched) => fetched.id === inputId) || {
            id: inputId || `invalid-url-track-${Math.random()}`,
            title: inputId ? "Error Loading Track" : "Invalid URL Provided",
            artist: "Error",
            albumName: "Error",
            coverUrl: null,
            spotifyUrl: inputTrack.spotifyUrl,
        }
    );
});
---

<div class="flex flex-col items-center justify-between">
    <div class="flex w-full flex-row items-baseline justify-between">
        <p class="text-md font-light text-[#99AABB] uppercase select-none">
            Favourite Tracks
        </p>
        <p class="text-xs font-light text-[#99AABB]/80 uppercase">
            Updated {format(date, "MMMM d, yyyy")}
        </p>
    </div>
    <div class="mt-1 h-[1px] w-full bg-[#99AABB]/40"></div>

    <div class="mt-4 grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
        {
            orderedTracks.map((track) => (
                <a
                    href={track.spotifyUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="group relative block"
                    title={`Listen to ${track.title} by ${track.artist} on Spotify`}
                >
                    <div class="pointer-events-none absolute bottom-full left-1/2 z-10 mb-2 w-max max-w-xs -translate-x-1/2 scale-95 rounded-md bg-[#435666] px-3 py-1.5 text-xs font-medium text-white/75 opacity-0 shadow-lg transition-all duration-200 ease-in-out group-hover:scale-100 group-hover:opacity-100">
                        {track.title} by {track.artist}
                        <div class="absolute top-full left-1/2 h-0 w-0 -translate-x-1/2 border-x-8 border-t-8 border-[#435666] border-x-transparent"></div>
                    </div>

                    <div class="flex flex-col items-center">
                        {track.coverUrl ? (
                            <Image
                                src={track.coverUrl}
                                alt={`${track.title} by ${track.artist}`}
                                width={300}
                                height={300}
                                class="w-full h-auto aspect-square rounded-sm object-cover shadow-lg outline outline-offset-0 outline-transparent transition-all duration-200 ease-in-out group-hover:outline-3 group-hover:outline-offset-[-3px] group-hover:outline-green-500"
                            />
                        ) : (
                            <div class="flex aspect-square w-full items-center justify-center rounded-sm bg-gray-700 outline outline-offset-0 outline-transparent transition-all duration-200 ease-in-out group-hover:outline-3 group-hover:outline-offset-[-3px] group-hover:outline-green-500">
                                <span class="p-2 text-center text-sm text-white">
                                    No Cover Art
                                </span>
                            </div>
                        )}
                    </div>
                </a>
            ))
        }
    </div>
</div>
