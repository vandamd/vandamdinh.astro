---
import { format, parse } from 'date-fns';
import { Image } from 'astro:assets';

// Function to extract Spotify ID from URL
const getSpotifyIdFromUrl = (url: string): string | null => {
    try {
        const parsedUrl = new URL(url);
        const pathParts = parsedUrl.pathname.split('/');
        // Ensure the path contains 'album' and an ID
        const albumIndex = pathParts.indexOf('album');
        if (albumIndex !== -1 && pathParts.length > albumIndex + 1) {
            return pathParts[albumIndex + 1];
        }
    } catch (e) {
        console.error("Invalid URL:", url, e);
    }
    return null;
};

interface AlbumInput {
    spotifyUrl: string;
}

const albumData: AlbumInput[] = [
    { spotifyUrl: 'https://open.spotify.com/album/4Dgxy95K9BWkDUvQPTaYBb?si=mj77_xXJS4WD_tUM9TiiiQ' },
    { spotifyUrl: 'https://open.spotify.com/album/4HTy9WFTYooRjE9giTmzAF?si=2752212911984b64' },
    { spotifyUrl: 'https://open.spotify.com/album/5o9aTepLhqQL2gXuKPhd8g?si=d26ba81516d44760' },
    { spotifyUrl: 'https://open.spotify.com/album/5u8SP8bbxcA7zJoAusBfgc?si=6_pjUGnkRaaOpjTzw4ypsQ' },
];
const date = '17/04/2025';

const clientId = import.meta.env.SPOTIFY_CLIENT_ID;
const clientSecret = import.meta.env.SPOTIFY_CLIENT_SECRET;

interface SpotifyAlbum {
    id: string;
    name: string;
    artists: { name: string }[];
    images: { url: string; height: number; width: number }[];
    external_urls: { spotify: string };
    release_date: string;
}

interface FetchedAlbumData {
    id: string;
    title: string;
    artist: string;
    coverUrl: string | null;
    spotifyUrl: string;
    releaseYear: string | null;
}

const getSpotifyAccessToken = async (): Promise<string | null> => {
    const authString = btoa(`${clientId}:${clientSecret}`);
    try {
        const response = await fetch('https://accounts.spotify.com/api/token', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${authString}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'grant_type=client_credentials',
        });
        if (!response.ok) {
            throw new Error(`Spotify Auth Error: ${response.status} ${await response.text()}`);
        }
        const data = await response.json();
        return data.access_token;
    } catch (error) {
        console.error('Failed to get Spotify access token:', error);
        return null;
    }
};

const fetchAlbumDetails = async (albumIds: string[], accessToken: string): Promise<FetchedAlbumData[]> => {
    if (!albumIds.length) return [];

    try {
        const response = await fetch(`https://api.spotify.com/v1/albums?ids=${albumIds.join(',')}`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
            },
        });

        if (!response.ok) {
            throw new Error(`Spotify API Error: ${response.status} ${await response.text()}`);
        }

        const data = await response.json();

        return data.albums.map((album: SpotifyAlbum | null): FetchedAlbumData => {
            if (!album) {
                console.warn(`Album details not found for one of the IDs.`);
                return {
                    id: 'unknown',
                    title: 'Album Not Found',
                    artist: 'Unknown Artist',
                    coverUrl: null,
                    spotifyUrl: '#',
                    releaseYear: null,
                };
            }

            const coverImage = album.images.length > 0 ? album.images[0].url : null; // Use largest image
            const artistNames = album.artists.map(artist => artist.name).join(', ');
            const releaseYear = album.release_date ? album.release_date.split('-')[0] : null;

            return {
                id: album.id,
                title: album.name,
                artist: artistNames,
                coverUrl: coverImage,
                spotifyUrl: album.external_urls.spotify,
                releaseYear,
            };
        });
    } catch (error) {
        console.error('Failed to fetch album details from Spotify:', error);
        return albumIds.map(id => ({
            id: id,
            title: 'Error Loading Album',
            artist: 'Error',
            coverUrl: null,
            spotifyUrl: '#',
            releaseYear: null
        }));
    }
};

const albumIds = albumData.map(a => getSpotifyIdFromUrl(a.spotifyUrl)).filter((id): id is string => id !== null);
let albums: FetchedAlbumData[] = [];
const accessToken = await getSpotifyAccessToken();

if (accessToken && albumIds.length > 0) {
    albums = await fetchAlbumDetails(albumIds, accessToken);
} else if (albumIds.length === 0) {
     console.warn("No valid Spotify Album IDs extracted from URLs.");
     albums = albumData.map((_, index) => ({
        id: `placeholder-${index}`,
        title: 'Invalid URL',
        artist: 'Unknown',
        coverUrl: null,
        spotifyUrl: '#',
        releaseYear: null
    }));
} else {
    console.error("Could not fetch albums due to missing access token.");
     albums = albumIds.map(id => ({
        id: id,
        title: 'Auth Error',
        artist: 'Error',
        coverUrl: null,
        spotifyUrl: '#',
        releaseYear: null
    }));
}

const orderedAlbums = albumData.map(inputAlbum => {
    const inputId = getSpotifyIdFromUrl(inputAlbum.spotifyUrl);
    return albums.find(fetched => fetched.id === inputId) || {
        id: inputId || `invalid-url-${Math.random()}`,
        title: inputId ? 'Error Loading Album' : 'Invalid URL Provided',
        artist: 'Error',
        coverUrl: null,
        spotifyUrl: inputAlbum.spotifyUrl,
        releaseYear: null
    };
});
---

<div class="flex flex-col items-center justify-between">
    <div class="w-full flex flex-row items-baseline justify-between">
        <p class="text-[#99AABB] text-md font-light uppercase select-none">Favourite Albums</p>
        <p class="text-[#99AABB]/80 text-xs font-light uppercase">Updated {format(parse(date, 'dd/MM/yyyy', new Date()), 'MMMM d, yyyy')}</p>
    </div>
    <div class="w-full h-[1px] bg-[#99AABB]/40 mt-1"></div>

    <div class="w-full grid grid-cols-4 gap-4 mt-4">
        {orderedAlbums.map(album => (
            <a href={album.spotifyUrl} target="_blank" rel="noopener noreferrer" class="block group relative" title={`Listen to ${album.title} by ${album.artist} on Spotify`}>
                <div
                    class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs px-3 py-1.5
                           bg-[#435666] text-white/75 text-xs font-medium rounded-md shadow-lg
                           opacity-0 scale-95 group-hover:opacity-100 group-hover:scale-100
                           transition-all duration-200 ease-in-out pointer-events-none z-10"
                >
                    {album.title}{album.releaseYear ? ` (${album.releaseYear})` : ''} by {album.artist}
                    <div class="absolute left-1/2 -translate-x-1/2 top-full w-0 h-0
                                border-x-8 border-x-transparent
                                border-t-8 border-[#435666]">
                    </div>
                </div>

                <div class="flex flex-col items-center">
                    {album.coverUrl ? (
                        <Image
                            src={album.coverUrl}
                            alt={`${album.title} by ${album.artist}`}
                            width={300}
                            height={300}
                            class="rounded-sm shadow-lg aspect-square object-cover outline outline-offset-0 outline-transparent transition-all duration-200 ease-in-out group-hover:outline-3 group-hover:outline-offset-[-3px] group-hover:outline-green-500"
                        />
                    ) : (
                        <div class="w-full aspect-square bg-gray-700 rounded-sm flex items-center justify-center outline outline-offset-0 outline-transparent transition-all duration-200 ease-in-out group-hover:outline-3 group-hover:outline-offset-[-3px] group-hover:outline-green-500">
                            <span class="text-white text-sm text-center p-2">No Cover Art</span>
                        </div>
                    )}
                </div>
            </a>
        ))}
    </div>
</div>
</div>